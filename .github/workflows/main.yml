name: gha-desa-adf-lhs-etl

on:
  workflow_dispatch:
    inputs:
      component:
        description: 'Seleccione el componente a desplegar/ejecutar'
        required: true
        type: choice
        options:
          - '{"label": "Todos", "key": "adf-all"}'
          - '{"label": "Datasets", "key": "dfs"}'
          - '{"label": "Dataflows", "key": "dfw"}'
          - '{"label": "Pipelines", "key": "dta-pip"}'
      component_name: 
        description: 'Nombre del componente a ejecutar (solo si deploy = EXEC)' 
        required: false 
        default: ""
      change_ticket: 
        description: 'Número de ticket de cambio (solo si deploy = EXEC)' 
        required: false 
        default: ""
      deploy:
        description: 'Seleccione el tipo de ejecución'
        required: true
        type: choice
        options:
          - CI
          - CD
          - EXEC
          - CI+CD
          - CI+CD+EXEC

permissions:
  contents: write
  actions: read

jobs:
  job_vd_checkActor:
    runs-on: ubuntu-latest
    outputs:
      teams: ${{ steps.actorTeams.outputs.teams }}
      env: ${{ steps.setEnv.outputs.env }}
      env_upper: ${{ steps.setEnv.outputs.env_upper }}
    steps:
      - name: stp-getTeamsfromActor
        uses: tspascoal/get-user-teams-membership@v2
        id: actorTeams
        with:
          username: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.SEC_ORG_ALL_GITHUB_VALIDATEACTOR }}

      - name: stp-SetEnvironment
        id: setEnv
        run: |
          env=${GITHUB_REF#refs/heads/}
          env_upper=$(echo "$env" | tr '[:lower:]' '[:upper:]')
          echo "env=$env" >> $GITHUB_ENV
          echo "env_upper=$env_upper" >> $GITHUB_ENV
          echo "env=${env}" >> $GITHUB_OUTPUT
          echo "env_upper=${env_upper}" >> $GITHUB_OUTPUT

  job_ci_scriptPrepare:
    needs: job_vd_checkActor
    if: contains('desa test prod', needs.job_vd_checkActor.outputs.env) && 
        (contains(needs.job_vd_checkActor.outputs.teams, 'CT-DSO-COEDevSecOps') || 
         contains(needs.job_vd_checkActor.outputs.teams, 'CT-DSO-ChapterDevSecOps') || 
         contains(needs.job_vd_checkActor.outputs.teams, 'CT-DSO-ChapterDevSecOpsExternal'))
    runs-on: ["self-hosted", "ghrg-in-${{ needs.job_vd_checkActor.outputs.env }}-devsecops"]
    steps:
      - name: stp-ExtractComponentKey
        run: |
          COMPONENT_KEY=$(echo '${{ inputs.component }}' | jq -r '.key')
          echo "COMPONENT_KEY=$COMPONENT_KEY" >> $GITHUB_ENV

      - name: stp-cloneRepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: stp-AzLogin
        run: |
          az login --service-principal -u ${{ secrets[format('SEC_ORG_IDA_SERVICE_PRINCIPAL_ID_{0}', needs.job_vd_checkActor.outputs.env_upper)] }} -p ${{ secrets[format('SEC_ORG_IDA_SERVICE_PRINCIPAL_SECRET_{0}', needs.job_vd_checkActor.outputs.env_upper)] }} --tenant ${{ secrets.SEC_ORG_ALL_TENANT_ID }}

      - name: stp-ExtractMaskSecretsDSO
        run: |
          secrets=(
            "ias-nss-plat-datalakehouse-id"
            "dta-nss-plat-datalakehouse-name"
            "dta-datalakesalud-rg-name"
            "dta-datalakesalud-databricks-name"
            "dta-datalakesalud-databricks-workspace"
            "dta-datalakesalud-databricks-cluster-id"
            "dta-datalakesalud-datafactory-name"
          )
          for secret in "${secrets[@]}"; do
            value=$(az keyvault secret show --vault-name ${{ secrets[format('SEC_ORG_ALL_KEYVAULT_NAME_DEVSECOPS_{0}', needs.job_vd_checkActor.outputs.env_upper)] }} --name $secret --subscription ${{ secrets.SEC_ORG_ALL_SUBSCRIPTION_ID_DEVSECOPS }} --query "value" -o tsv)
            echo "::add-mask::$value"
            echo "$secret=$value" >> $GITHUB_ENV
          done

      - name: stp-GetCredentials
        run: |
          echo "::add-mask::${{ secrets.SEC_ORG_IDA_SERVICE_PRINCIPAL_ID_DESA }}"
          echo "::add-mask::${{ secrets.SEC_ORG_IDA_SERVICE_PRINCIPAL_SECRET_DESA }}"
          echo "::add-mask::${{ secrets.SEC_ORG_ALL_TENANT_ID }}"
          echo "ARM_CLIENT_ID=${{ secrets.SEC_ORG_IDA_SERVICE_PRINCIPAL_ID_DESA }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.SEC_ORG_IDA_SERVICE_PRINCIPAL_SECRET_DESA }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.SEC_ORG_ALL_TENANT_ID }}" >> $GITHUB_ENV

      - name: stp-ReplaceTokens
        uses: qetza/replacetokens-action@v1
        with:
          sources: |
            ${{ github.workspace }}/**/env.${{ needs.job_vd_checkActor.outputs.env }}
          variables: ${{ toJson(env) }}

      - name: stp-ValidateDeployScripts
        run: |
          cd ${{ github.workspace }}/.github/workflows
          find libs/ -type f -name "*.sh" -exec chmod +x {} \;

      - name: Stp-ScriptScan
        run: ./libs/scripts-scan/validate-all-scripts.sh

      - name: Stp-ValidateComponents
        run: |
          ./libs/scripts/validate/${COMPONENT_KEY}-validate.sh ${{ needs.job_vd_checkActor.outputs.env }}

      - name: stp-compressDirectory
        run: |
          tar -czvf ${{ vars.VAR_REPO_IAS_ARTIFACT_FILE }}.tar.gz ${{ vars.VAR_ORG_IAS_PRINCIPAL_PATH }}

      - name: stp-uploadDirCompressed
        uses: actions/upload-artifact@v4
        with:
          name: ${{ vars.VAR_REPO_IAS_ARTIFACT_FILE }}
          path: ${{ github.workspace }}/${{ vars.VAR_REPO_IAS_ARTIFACT_FILE }}.tar.gz

  job_cd_scriptDeploy:
    needs: job_vd_checkActor
    if: (inputs.deploy == 'CD' || inputs.deploy == 'CI+CD' || inputs.deploy == 'CI+CD+EXEC') && 
        contains('desa test prod', needs.job_vd_checkActor.outputs.env) && 
        (contains(needs.job_vd_checkActor.outputs.teams, 'CT-DSO-COEDevSecOps') || 
         contains(needs.job_vd_checkActor.outputs.teams, 'CT-DSO-ChapterDevSecOps') || 
         contains(needs.job_vd_checkActor.outputs.teams, 'CT-DSO-ChapterDevSecOpsExternal'))
    runs-on: ["self-hosted", "ghrg-in-${{ needs.job_vd_checkActor.outputs.env }}-devsecops"]
    steps:
      - name: stp-ExtractComponentKey
        run: |
          COMPONENT_KEY=$(echo '${{ inputs.component }}' | jq -r '.key')
          echo "COMPONENT_KEY=$COMPONENT_KEY" >> $GITHUB_ENV

      - name: stp-DownloadArtifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ vars.VAR_REPO_IAS_ARTIFACT_FILE }}
          path: ${{ github.workspace }}

      - name: stp-ExtractArtifact
        run: |
          tar -xzvf ${{ github.workspace }}/${{ vars.VAR_REPO_IAS_ARTIFACT_FILE }}.tar.gz -C ${{ github.workspace }}

      - name: stp-AzLogin
        run: |
          az login --service-principal -u ${{ secrets[format('SEC_ORG_IDA_SERVICE_PRINCIPAL_ID_{0}', needs.job_vd_checkActor.outputs.env_upper)] }} -p ${{ secrets[format('SEC_ORG_IDA_SERVICE_PRINCIPAL_SECRET_{0}', needs.job_vd_checkActor.outputs.env_upper)] }} --tenant ${{ secrets.SEC_ORG_ALL_TENANT_ID }}

      - name: stp-GetCredentials
        run: |
          echo "::add-mask::${{ secrets.SEC_ORG_IDA_SERVICE_PRINCIPAL_ID_DESA }}"
          echo "::add-mask::${{ secrets.SEC_ORG_IDA_SERVICE_PRINCIPAL_SECRET_DESA }}"
          echo "::add-mask::${{ secrets.SEC_ORG_ALL_TENANT_ID }}"
          echo "ARM_CLIENT_ID=${{ secrets.SEC_ORG_IDA_SERVICE_PRINCIPAL_ID_DESA }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.SEC_ORG_IDA_SERVICE_PRINCIPAL_SECRET_DESA }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.SEC_ORG_ALL_TENANT_ID }}" >> $GITHUB_ENV

      - name: stp-ValidateDeployScripts
        run: |
          cd ${{ github.workspace }}/.github/workflows
          find libs/ -type f -name "*.sh" -exec chmod +x {} \;

      - name: Stp-DeployComponents
        run: |
          ./libs/scripts/deploy/${COMPONENT_KEY}-deploy.sh ${{ needs.job_vd_checkActor.outputs.env }}

  job_run_scriptExec:
    needs: job_vd_checkActor
    if: (inputs.deploy == 'EXEC' || inputs.deploy == 'CI+CD+EXEC') && 
        contains('desa test prod', needs.job_vd_checkActor.outputs.env) && 
        (contains(needs.job_vd_checkActor.outputs.teams, 'CT-DSO-COEDevSecOps') || 
         contains(needs.job_vd_checkActor.outputs.teams, 'CT-DSO-ChapterDevSecOps') || 
         contains(needs.job_vd_checkActor.outputs.teams, 'CT-DSO-ChapterDevSecOpsExternal'))
    runs-on: ["self-hosted", "ghrg-in-${{ needs.job_vd_checkActor.outputs.env }}-devsecops"]
    steps:
      - name: stp-ExtractComponentKey
        run: |
          COMPONENT_KEY=$(echo '${{ inputs.component }}' | jq -r '.key')
          echo "COMPONENT_KEY=$COMPONENT_KEY" >> $GITHUB_ENV

      - name: stp-ValidarComponentePermitido
        run: |
          if [[ "$COMPONENT_KEY" == "dta-pip" ]]; then
            echo "❌ El componente '$COMPONENT_KEY' solo puede ser ejecutado en 'CI y/o CD'."
            exit 1
          fi

      - name: stp-DownloadArtifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ vars.VAR_REPO_IAS_ARTIFACT_FILE }}
          path: ${{ github.workspace }}

      - name: stp-ExtractArtifact
        run: |
          tar -xzvf ${{ github.workspace }}/${{ vars.VAR_REPO_IAS_ARTIFACT_FILE }}.tar.gz -C ${{ github.workspace }}

      - name: stp-AzLogin
        run: |
          az login --service-principal -u ${{ secrets[format('SEC_ORG_IDA_SERVICE_PRINCIPAL_ID_{0}', needs.job_vd_checkActor.outputs.env_upper)] }} -p ${{ secrets[format('SEC_ORG_IDA_SERVICE_PRINCIPAL_SECRET_{0}', needs.job_vd_checkActor.outputs.env_upper)] }} --tenant ${{ secrets.SEC_ORG_ALL_TENANT_ID }}

      - name: stp-GetCredentials
        run: |
          echo "::add-mask::${{ secrets.SEC_ORG_IDA_SERVICE_PRINCIPAL_ID_DESA }}"
          echo "::add-mask::${{ secrets.SEC_ORG_IDA_SERVICE_PRINCIPAL_SECRET_DESA }}"
          echo "::add-mask::${{ secrets.SEC_ORG_ALL_TENANT_ID }}"
          echo "ARM_CLIENT_ID=${{ secrets.SEC_ORG_IDA_SERVICE_PRINCIPAL_ID_DESA }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.SEC_ORG_IDA_SERVICE_PRINCIPAL_SECRET_DESA }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.SEC_ORG_ALL_TENANT_ID }}" >> $GITHUB_ENV

      - name: stp-ValidateDeployScripts
        run: |
          cd ${{ github.workspace }}/.github/workflows
          find libs/ -type f -name "*.sh" -exec chmod +x {} \;

      - name: stp-ExecuteComponents
        run: |
          ./libs/scripts/execute/${COMPONENT_KEY}-execute.sh "${{ needs.job_vd_checkActor.outputs.env }}" "${{ inputs.component_name }}" "${{ inputs.change_ticket }}"
